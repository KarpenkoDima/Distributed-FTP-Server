# nginx-ftp-proxe.conf - Enchanced FTP Proxy Configuration
events{
    worker_connections 1024;
    use epoll # optimithation for Linux environment
}

stream {
    # Логирование для диагностики - важно для понимания потока трафика
    log_format ftp_format '$remote_addr [$time_local] '
                          '$protocol $status $bytes_sent $bytes_received '
                          '$session_time "$upstream_addr"';

    access_log /var/log/nginx/ftp_access.log ftp_format;
    error_log /var/log/nginx/ftp_error.log warn;

    # Upstream for FTP Control Connection
    # Здесь мы определяем пул сереверов для управляющих соединений
    upstream ftp_control_backend {
        # Используем ip_hash для sticky session - важно для FTP
        # Это гарантирует, что один клиент всегда попадает на тот же сервер
        ip_hash;

        server ftp-server-1:2121 max fails=3 fail_timeout=30s;
        server ftp-server-2:2122 max fails=3 fail_timeout=30s;
        server ftp-server-3:2123 max fails=3 fail_timeout=30s;
    }

   # Upstream для FTP Data Connections
    # Nginx будет слушать диапазон 50000-50010 и проксировать на бэкенды.
    # ВАЖНО: Nginx ПЕРЕДАЕТ СОЕДИНЕНИЕ НА ТОТ ЖЕ ПОРТ, НА КОТОРЫЙ ОНО ПРИШЛО.
    # То есть, если клиент подключился к Nginx:50005, Nginx проксирует на ftp-server-X:50005.
    # Ваши бэкенд FTP-серверы должны слушать ВЕСЬ ДИАПАЗОН 50000-50010!
    upstream ftp_data_backend {
        hash $remote_addr consistent; # Сохраняем привязку клиента к тому же серверу
        # Здесь мы указываем только один порт для каждого сервера,
        # но это не означает, что Nginx будет проксировать все на 50000.
        # Это просто указывает на наличие серверов в этом апстриме.
        # Nginx будет использовать тот порт, на который пришел запрос.
        server ftp-server-1:50000; # Ваши FTP-серверы должны слушать на всех портах 50000-50010
        server ftp-server-2:50000;
        server ftp-server-3:50000;
    }

    # FTP Control Connection Proxy (Nginx слушает порт 21)
    server {
        listen 21;
        proxy_pass ftp_control_backend;
        proxy_timeout 300s;          # FTP сессии могут быть долгими
        proxy_connect_timeout 5s;    # Быстрое подключение к backend
        # proxy_bind $remote_addr transparent; # Используйте осторожно, требует CAP_NET_ADMIN в Docker
    }

    # FTP Data Connection Proxy (Nginx слушает диапазон портов 50000-50010)
    server {
        listen 50000-50010; # Nginx будет слушать весь диапазон
        proxy_pass ftp_data_backend; # И проксировать на вышеописанный апстрим
        proxy_timeout 60s;           # Короче для data соединений
        proxy_connect_timeout 3s;    # Быстрое установление data соединения
    }
}
