# nginx.conf - Enhanced FTP Proxy Configuration
events{
  worker_connections 1024;
  # Optimization for Linux environments
  use epoll;
}

stream {
  # Логирование для диагностики
  log_format ftp_format '$remote_addr [$time_local] '
                        '$protocol $status $bytes_sent $bytes_received '
                        '$session_time "$upstream_addr"';

  access_log /var/log/nginx/ftp_access.log ftp_format;
  error_log /var/log/nginx/ftp_error.log warn;

  # Upstream for FTP Control Connection
  # Используем hash $remote_addr consistent для sticky session
  # Это гарантирует, что один клиент всегда попадает на тот же сервер
  upstream ftp_control_backend {
    hash $remote_addr consistent;

    # Используем имена контейнеров и их внутренние порты
    server ftp-server-1:21 max_fails=3 fail_timeout=30s;
    server ftp-server-2:21 max_fails=3 fail_timeout=30s;
    server ftp-server-3:21 max_fails=3 fail_timeout=30s;
  }

  # Upstream для FTP Data Connections
  # Nginx будет слушать диапазон 50000-50010 и проксировать
  # на тот же порт на бэкенде.
  upstream ftp_data_backend {
    hash $remote_addr consistent; # Сохраняем привязку клиента к тому же серверу
    # Используем имена контейнеров и их внутренний порт для данных
    server ftp-server-1:$server_port;
    server ftp-server-2:$server_port;
    server ftp-server-3:$server_port;
  }

  # FTP Control Connection Proxy (Nginx слушает порт 21)
  server {
    listen 21;
    proxy_pass ftp_control_backend;
    proxy_timeout 300s;
    proxy_connect_timeout 5s;
  }

  # FTP Data Connection Proxy (Nginx слушает диапазон портов 50000-50010)
  server {
    listen 50000-50010; # Nginx будет слушать весь диапазон
    proxy_pass ftp_data_backend; # И проксировать на вышеописанный апстрим
    proxy_timeout 60s;
    proxy_connect_timeout 3s;
  }
}
